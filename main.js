/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => KoreanBibleSearchPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var KoreanBibleSearchPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon("quote", "Search Bible", (evt) => {
      new VerseSuggestModal(this.app).open();
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
    this.addCommand({
      id: "open-sample-modal-simple",
      name: "Open sample modal (simple)",
      callback: () => {
        new VerseSuggestModal(this.app).open();
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.registerEditorSuggest(new VerseEditorSuggester(this, this.settings));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var bookNames = {
  "1": {
    name: "Genesis",
    key: "ge",
    koreanNames: [
      "\uCC3D\uC138\uAE30",
      "\uCC3D"
    ],
    shortNames: [
      "Ge",
      "Gen"
    ]
  },
  "2": {
    name: "Exodus",
    key: "exo",
    koreanNames: [
      "\uCD9C\uC560\uAD7D\uAE30",
      "\uCD9C"
    ],
    shortNames: [
      "Ex",
      "Exo"
    ]
  },
  "3": {
    name: "Leviticus",
    key: "lev",
    koreanNames: [
      "\uB808\uC704\uAE30",
      "\uB808"
    ],
    shortNames: [
      "Le",
      "Lev"
    ]
  },
  "4": {
    name: "Numbers",
    key: "num",
    koreanNames: [
      "\uBBFC\uC218\uAE30",
      "\uBBFC"
    ],
    shortNames: [
      "Nu",
      "Num"
    ]
  },
  "5": {
    name: "Deuteronomy",
    key: "deu",
    koreanNames: [
      "\uC2E0\uBA85\uAE30",
      "\uC2E0"
    ],
    shortNames: [
      "Dt",
      "Deut",
      "Deu",
      "De"
    ]
  },
  "6": {
    name: "Joshua",
    key: "josh",
    koreanNames: [
      "\uC5EC\uD638\uC218\uC544",
      "\uC218"
    ],
    shortNames: [
      "Js",
      "Jos",
      "Josh"
    ]
  },
  "7": {
    name: "Judges",
    key: "jdgs",
    koreanNames: [
      "\uC0AC\uC0AC\uAE30",
      "\uC0BF"
    ],
    shortNames: [
      "Jg",
      "Jud",
      "Jdg",
      "Ju",
      "Jdgs",
      "Judg"
    ]
  },
  "8": {
    name: "Ruth",
    key: "ruth",
    koreanNames: [
      "\uB8FB\uAE30",
      "\uB8FB"
    ],
    shortNames: [
      "Ru",
      "Rut"
    ]
  },
  "9": {
    name: "1 Samuel",
    key: "1sm",
    koreanNames: [
      "\uC0AC\uBB34\uC5D8\uC0C1",
      "\uC0BC\uC0C1"
    ],
    shortNames: [
      "1 Sa",
      "1 Sam"
    ]
  },
  "10": {
    name: "2 Samuel",
    key: "2sm",
    koreanNames: [
      "\uC0AC\uBB34\uC5D8\uD558",
      "\uC0BC\uD558"
    ],
    shortNames: [
      "2 Sa",
      "2 Sam"
    ]
  },
  "11": {
    name: "1 Kings",
    key: "1ki",
    koreanNames: [
      "\uC5F4\uC655\uAE30\uC0C1",
      "\uC655\uC0C1"
    ],
    shortNames: [
      "1 Ki",
      "1 King",
      "1 Kin",
      "1 Kngs"
    ]
  },
  "12": {
    name: "2 Kings",
    key: "2ki",
    koreanNames: [
      "\uC5F4\uC655\uAE30\uD558",
      "\uC655\uD558"
    ],
    shortNames: [
      "2 Ki",
      "2 King",
      "2 Kin",
      "2 Kngs"
    ]
  },
  "13": {
    name: "1 Chronicles",
    key: "1chr",
    koreanNames: [
      "\uC5ED\uB300\uC0C1",
      "\uB300\uC0C1"
    ],
    shortNames: [
      "1 Ch",
      "1 Chr",
      "1 Chron"
    ]
  },
  "14": {
    name: "2 Chronicles",
    key: "2chr",
    koreanNames: [
      "\uC5ED\uB300\uD558",
      "\uB300\uD558"
    ],
    shortNames: [
      "2 Ch",
      "2 Chr",
      "2 Chron"
    ]
  },
  "15": {
    name: "Ezra",
    key: "ezra",
    koreanNames: [
      "\uC5D0\uC2A4\uB77C",
      "\uC2A4"
    ],
    shortNames: [
      "Ez",
      "Ezr"
    ]
  },
  "16": {
    name: "Nehemiah",
    key: "neh",
    koreanNames: [
      "\uB290\uD5E4\uBBF8\uC57C",
      "\uB290"
    ],
    shortNames: [
      "Ne",
      "Neh"
    ]
  },
  "17": {
    name: "Esther",
    key: "est",
    koreanNames: [
      "\uC5D0\uC2A4\uB354",
      "\uC5D0"
    ],
    shortNames: [
      "Es",
      "Est",
      "Esth",
      "Ester"
    ]
  },
  "18": {
    name: "Job",
    key: "job",
    koreanNames: [
      "\uC6A5\uAE30",
      "\uC6A5"
    ],
    shortNames: [
      "Jb"
    ]
  },
  "19": {
    name: "Psalms",
    key: "psa",
    koreanNames: [
      "\uC2DC\uD3B8",
      "\uC2DC"
    ],
    shortNames: [
      "Ps",
      "Psa",
      "Pss",
      "Psalms"
    ]
  },
  "20": {
    name: "Proverbs",
    key: "prv",
    koreanNames: [
      "\uC7A0\uC5B8",
      "\uC7A0"
    ],
    shortNames: [
      "Pr",
      "Prov",
      "Pro"
    ]
  },
  "21": {
    name: "Ecclesiastes",
    key: "eccl",
    koreanNames: [
      "\uC804\uB3C4\uC11C",
      "\uC804"
    ],
    shortNames: [
      "Ec",
      "Ecc"
    ]
  },
  "22": {
    name: "Song of Solomon",
    key: "ssol",
    koreanNames: [
      "\uC544\uAC00",
      "\uC544"
    ],
    shortNames: [
      "SOS",
      "Song of Songs",
      "SongOfSongs"
    ]
  },
  "23": {
    name: "Isaiah",
    key: "isa",
    koreanNames: [
      "\uC774\uC0AC\uC57C",
      "\uC0AC"
    ],
    shortNames: [
      "Isa"
    ]
  },
  "24": {
    name: "Jeremiah",
    key: "jer",
    koreanNames: [
      "\uC608\uB808\uBBF8\uC57C",
      "\uB818"
    ],
    shortNames: [
      "Je",
      "Jer"
    ]
  },
  "25": {
    name: "Lamentations",
    key: "lam",
    koreanNames: [
      "\uC608\uB798\uBBF8\uC57C\uC560\uAC00",
      "\uC560\uAC00",
      "\uC560"
    ],
    shortNames: [
      "La",
      "Lam",
      "Lament"
    ]
  },
  "26": {
    name: "Ezekiel",
    key: "eze",
    koreanNames: [
      "\uC5D0\uC2A4\uAC94",
      "\uAC94"
    ],
    shortNames: [
      "Ek",
      "Ezek",
      "Eze"
    ]
  },
  "27": {
    name: "Daniel",
    key: "dan",
    koreanNames: [
      "\uB2E4\uB2C8\uC5D8",
      "\uB2E8"
    ],
    shortNames: [
      "Da",
      "Dan",
      "Dl",
      "Dnl"
    ]
  },
  "28": {
    name: "Hosea",
    key: "hos",
    koreanNames: [
      "\uD638\uC138\uC544",
      "\uD638"
    ],
    shortNames: [
      "Ho",
      "Hos"
    ]
  },
  "29": {
    name: "Joel",
    key: "joel",
    koreanNames: [
      "\uC694\uC5D8",
      "\uC69C"
    ],
    shortNames: [
      "Jl",
      "Joe"
    ]
  },
  "30": {
    name: "Amos",
    key: "amos",
    koreanNames: [
      "\uC544\uBAA8\uC2A4",
      "\uC554"
    ],
    shortNames: [
      "Am",
      "Amo"
    ]
  },
  "31": {
    name: "Obadiah",
    key: "obad",
    koreanNames: [
      "\uC624\uBC14\uB31C",
      "\uC635"
    ],
    shortNames: [
      "Ob",
      "Oba",
      "Obd",
      "Odbh"
    ]
  },
  "32": {
    name: "Jonah",
    key: "jonah",
    koreanNames: [
      "\uC694\uB098",
      "\uC698"
    ],
    shortNames: [
      "Jh",
      "Jon",
      "Jnh"
    ]
  },
  "33": {
    name: "Micah",
    key: "mic",
    koreanNames: [
      "\uBBF8\uAC00",
      "\uBBF8"
    ],
    shortNames: [
      "Mi",
      "Mic"
    ]
  },
  "34": {
    name: "Nahum",
    key: "nahum",
    koreanNames: [
      "\uB098\uD6D4",
      "\uB098"
    ],
    shortNames: [
      "Na",
      "Nah"
    ]
  },
  "35": {
    name: "Habakkuk",
    key: "hab",
    koreanNames: [
      "\uD558\uBC15\uAD6D",
      "\uD569"
    ],
    shortNames: [
      "Hb",
      "Hab",
      "Hk",
      "Habk"
    ]
  },
  "36": {
    name: "Zephaniah",
    key: "zep",
    koreanNames: [
      "\uC2A4\uBC14\uB0D0",
      "\uC2B5"
    ],
    shortNames: [
      "Zp",
      "Zep",
      "Zeph",
      "Ze"
    ]
  },
  "37": {
    name: "Haggai",
    key: "hag",
    koreanNames: [
      "\uD559\uAC1C",
      "\uD559"
    ],
    shortNames: [
      "Ha",
      "Hag",
      "Hagg"
    ]
  },
  "38": {
    name: "Zechariah",
    key: "zep",
    koreanNames: [
      "\uC2A4\uAC00\uB7B4",
      "\uC2A5"
    ],
    shortNames: [
      "Zc",
      "Zech",
      "Zec"
    ]
  },
  "39": {
    name: "Malachi",
    key: "mal",
    koreanNames: [
      "\uB9D0\uB77C\uAE30",
      "\uB9D0"
    ],
    shortNames: [
      "Ml",
      "Mal",
      "Mlc"
    ]
  },
  "40": {
    name: "Matthew",
    key: "mat",
    koreanNames: [
      "\uB9C8\uD0DC\uBCF5\uC74C",
      "\uB9C8"
    ],
    shortNames: [
      "Mt",
      "Matt",
      "Mat"
    ]
  },
  "41": {
    name: "Mark",
    key: "mark",
    koreanNames: [
      "\uB9C8\uAC00\uBCF5\uC74C",
      "\uB9C9"
    ],
    shortNames: [
      "Mk",
      "Mrk"
    ]
  },
  "42": {
    name: "Luke",
    key: "luke",
    koreanNames: [
      "\uB204\uAC00\uBCF5\uC74C",
      "\uB205"
    ],
    shortNames: [
      "Lk",
      "Luk",
      "Lu"
    ]
  },
  "43": {
    name: "John",
    key: "john",
    koreanNames: [
      "\uC694\uD55C\uBCF5\uC74C",
      "\uC694"
    ],
    shortNames: [
      "Jn",
      "Joh",
      "Jo"
    ]
  },
  "44": {
    name: "Acts",
    key: "acts",
    koreanNames: [
      "\uC0AC\uB3C4\uD589\uC804",
      "\uD589"
    ],
    shortNames: [
      "Ac",
      "Act"
    ]
  },
  "45": {
    name: "Romans",
    key: "rom",
    koreanNames: [
      "\uB85C\uB9C8\uC11C",
      "\uB86C"
    ],
    shortNames: [
      "Ro",
      "Rom",
      "Rmn",
      "Rmns"
    ]
  },
  "46": {
    name: "1 Corinthians",
    key: "1cor",
    koreanNames: [
      "\uACE0\uB9B0\uB3C4\uC804\uC11C",
      "\uACE0\uC804"
    ],
    shortNames: [
      "1 Co",
      "1 Cor"
    ]
  },
  "47": {
    name: "2 Corinthians",
    key: "2cor",
    koreanNames: [
      "\uACE0\uB9B0\uB3C4\uD6C4\uC11C",
      "\uACE0\uD6C4"
    ],
    shortNames: [
      "2 Co",
      "2 Cor"
    ]
  },
  "48": {
    name: "Galatians",
    key: "gal",
    koreanNames: [
      "\uAC08\uB77C\uB514\uC544\uC11C",
      "\uAC08"
    ],
    shortNames: [
      "Ga",
      "Gal",
      "Gltns"
    ]
  },
  "49": {
    name: "Ephesians",
    key: "eph",
    koreanNames: [
      "\uC5D0\uBCA0\uC18C\uC11C",
      "\uC5E1"
    ],
    shortNames: [
      "Ep",
      "Eph",
      "Ephn"
    ]
  },
  "50": {
    name: "Philippians",
    key: "phi",
    koreanNames: [
      "\uBE4C\uB9BD\uBCF4\uC11C",
      "\uBE4C"
    ],
    shortNames: [
      "Phi",
      "Phil"
    ]
  },
  "51": {
    name: "Colossians",
    key: "col",
    koreanNames: [
      "\uACE8\uB85C\uC0C8\uC11C",
      "\uACE8"
    ],
    shortNames: [
      "Co",
      "Col",
      "Colo",
      "Cln",
      "Clns"
    ]
  },
  "52": {
    name: "1 Thessalonians",
    key: "1th",
    koreanNames: [
      "\uB370\uC0B4\uB85C\uB2C8\uAC00\uC804\uC11C",
      "\uC0B4\uC804"
    ],
    shortNames: [
      "1 Th",
      "1 Thess",
      "1 Thes"
    ]
  },
  "53": {
    name: "2 Thessalonians",
    key: "2th",
    koreanNames: [
      "\uB370\uC0B4\uB85C\uB2C8\uAC00\uD6C4\uC11C",
      "\uC0B4\uD6C4"
    ],
    shortNames: [
      "2 Th",
      "2 Thess",
      "2 Thes"
    ]
  },
  "54": {
    name: "1 Timothy",
    key: "1tim",
    koreanNames: [
      "\uB514\uBAA8\uB370\uC804\uC11C",
      "\uB524\uC804"
    ],
    shortNames: [
      "1 Ti",
      "1 Tim"
    ]
  },
  "55": {
    name: "2 Timothy",
    key: "2tim",
    koreanNames: [
      "\uB514\uBAA8\uB370\uD6C4\uC11C",
      "\uB524\uD6C4"
    ],
    shortNames: [
      "2 Ti",
      "2 Tim"
    ]
  },
  "56": {
    name: "Titus",
    key: "titus",
    koreanNames: [
      "\uB514\uB3C4\uC11C",
      "\uB51B"
    ],
    shortNames: [
      "Ti",
      "Tit",
      "Tt",
      "Ts"
    ]
  },
  "57": {
    name: "Philemon",
    key: "phmn",
    koreanNames: [
      "\uBE4C\uB808\uBAAC\uC11C",
      "\uBE4C\uB808\uBAAC",
      "\uBAAC"
    ],
    shortNames: [
      "Pm",
      "Phile",
      "Philm"
    ]
  },
  "58": {
    name: "Hebrews",
    key: "heb",
    koreanNames: [
      "\uD788\uBE0C\uB9AC\uC11C",
      "\uD788"
    ],
    shortNames: [
      "He",
      "Heb",
      "Hw"
    ]
  },
  "59": {
    name: "James",
    key: "jas",
    koreanNames: [
      "\uC57C\uACE0\uBCF4\uC11C",
      "\uC57D"
    ],
    shortNames: [
      "Jm",
      "Jam",
      "Jas",
      "Ja"
    ]
  },
  "60": {
    name: "1 Peter",
    key: "1pet",
    koreanNames: [
      "\uBCA0\uB4DC\uB85C\uC804\uC11C",
      "\uBCA7\uC804"
    ],
    shortNames: [
      "1 Pe",
      "1 Pet",
      "1 P"
    ]
  },
  "61": {
    name: "2 Peter",
    key: "2pet",
    koreanNames: [
      "\uBCA0\uB4DC\uB85C\uC804\uC11C",
      "\uBCA7\uD6C4"
    ],
    shortNames: [
      "2 Pe",
      "2 Pet",
      "2 P"
    ]
  },
  "62": {
    name: "1 John",
    key: "1jn",
    koreanNames: [
      "\uC694\uD55C1\uC11C",
      "\uC694\uD55C\uC77C\uC11C",
      "\uC6941"
    ],
    shortNames: [
      "1 Joh",
      "1 Jo",
      "1 Jn",
      "1 J"
    ]
  },
  "63": {
    name: "2 John",
    key: "2jn",
    koreanNames: [
      "\uC694\uD55C2\uC11C",
      "\uC694\uD55C\uC774\uC11C",
      "\uC6942"
    ],
    shortNames: [
      "2 Joh",
      "2 Jo",
      "2 Jn",
      "2 J"
    ]
  },
  "64": {
    name: "3 John",
    key: "3jn",
    koreanNames: [
      "\uC694\uD55C3\uC11C",
      "\uC694\uD55C3\uC11C",
      "\uC6943"
    ],
    shortNames: [
      "3 Joh",
      "3 Jo",
      "3 Jn",
      "3 J"
    ]
  },
  "65": {
    name: "Jude",
    key: "jude",
    koreanNames: [
      "\uC720\uB2E4\uC11C",
      "\uC720"
    ],
    shortNames: []
  },
  "66": {
    name: "Revelation",
    key: "rev",
    koreanNames: [
      "\uC694\uD55C\uACC4\uC2DC\uB85D",
      "\uACC4"
    ],
    shortNames: [
      "Re",
      "Rev",
      "Rvltn"
    ]
  }
};
async function fetchRequest(url) {
  const proxyUrl = "https://api.allorigins.win/raw?url=";
  const response = await fetch(`${proxyUrl}${encodeURIComponent(url)}`);
  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }
  return response.text();
}
function verseMatch(verseTrigger) {
  const cleanedQuery = verseTrigger.replace(/\s+/g, "");
  return cleanedQuery.match(/([\uAC00-\uD7AF]{1,})\s*(\d{1,3}):(\d{1,3}(-\d{1,3})?)/);
}
function extractVerses(html) {
  const parser = new DOMParser();
  const doc = parser.parseFromString(html, "text/html");
  const smallTags = doc.querySelectorAll("small");
  const verses = [];
  smallTags.forEach((smallTag) => {
    const verseNumber = smallTag.textContent.trim();
    let textNode = smallTag.nextSibling;
    let verseText = "";
    while (textNode && textNode.nodeName !== "BR") {
      if (textNode.nodeType === Node.TEXT_NODE) {
        verseText += textNode.textContent.trim();
      }
      textNode = textNode.nextSibling;
    }
    verses.push({ verseNumber, verseText });
  });
  return verses;
}
function formatVerses(verses) {
  return verses.map((v) => {
    const verseNumber = v.verseNumber.split(":")[1];
    return `${verseNumber} ${v.verseText}`;
  }).join("\n");
}
async function callAPI(query) {
  try {
    const apiUrl = `http://ibibles.net/quote.php?kor-${query}`;
    const response = await fetchRequest(apiUrl);
    const extractedVerses = extractVerses(response);
    return [formatVerses(extractedVerses)];
  } catch (error) {
    console.error("Error fetching data:", error);
    return [];
  }
}
var VerseSuggestModal = class extends import_obsidian.SuggestModal {
  constructor(app) {
    super(app);
    this.selectedVerses = null;
    this.setInstructions([
      { command: "", purpose: "\uC0BD\uC785\uD560 \uAD6C\uC808 \uC120\uD0DD, \uC608\uC2DC: \uC694\uD55C\uBCF5\uC74C3:16-18" }
    ]);
  }
  async getSuggestions(query) {
    const match = verseMatch(query);
    if (match) {
      const book = match[1];
      const chapter = match[2];
      const verses = match[3];
      const bookNameQuery = Object.values(bookNames).find((bookName) => bookName.koreanNames.includes(book));
      const queryString = `${bookNameQuery == null ? void 0 : bookNameQuery.key}/${chapter}:${verses}`;
      const suggestions = await callAPI(queryString);
      this.selectedVerses = `${bookNameQuery == null ? void 0 : bookNameQuery.koreanNames[0]} ${chapter}:${verses}`;
      return suggestions;
    }
    return [];
  }
  renderSuggestion(suggestion, el) {
    el.createEl("div", { text: suggestion });
  }
  onChooseSuggestion(suggestion, evt) {
    var _a, _b;
    const editor = (_a = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _a.editor;
    if (!editor) {
      return;
    }
    const formattedSuggestion = this.formatVersesForCallout(suggestion, this.selectedVerses);
    const cursor = editor.getCursor();
    editor.replaceRange(formattedSuggestion, cursor);
    const newCursorPosition = {
      line: cursor.line + formattedSuggestion.split("\n").length - 1,
      ch: ((_b = formattedSuggestion.split("\n").pop()) == null ? void 0 : _b.length) || 0
    };
    editor.setCursor(newCursorPosition);
  }
  formatVersesForCallout(suggestion, selectedVerses) {
    return `> [!quote]+ ${selectedVerses ? selectedVerses : "\uAD6C\uC808"}
> ${suggestion}`;
  }
};
var VerseEditorSuggester = class extends import_obsidian.EditorSuggest {
  constructor(plugin, settings) {
    super(plugin.app);
    this.selectedVerses = null;
    this.plugin = plugin;
    this.settings = settings;
  }
  onTrigger(cursor, editor, file) {
    const currentContent = editor.getLine(cursor.line).substring(0, cursor.ch);
    if (currentContent.length < 2) {
      return null;
    }
    const prefixTrigger = currentContent.substring(0, 2);
    if (prefixTrigger !== "++") {
      return null;
    }
    const queryContent = currentContent.substring(2);
    const match = verseMatch(queryContent);
    if (match) {
      return {
        end: cursor,
        start: { line: cursor.line, ch: 0 },
        query: match[0]
      };
    }
    return null;
  }
  async getSuggestions(context) {
    const match = verseMatch(context.query);
    if (match) {
      const book = match[1];
      const chapter = match[2];
      const verses = match[3];
      const bookNameQuery = Object.values(bookNames).find((bookName) => bookName.koreanNames.includes(book));
      const queryString = `${bookNameQuery == null ? void 0 : bookNameQuery.key}/${chapter}:${verses}`;
      const suggestions = await callAPI(queryString);
      this.selectedVerses = `${bookNameQuery == null ? void 0 : bookNameQuery.koreanNames[0]} ${chapter}:${verses}`;
      return suggestions;
    }
    return [];
  }
  renderSuggestion(suggestion, el) {
    el.createEl("div", { text: suggestion });
  }
  selectSuggestion(suggestion, evt) {
    var _a, _b;
    const editor = (_a = this.plugin.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _a.editor;
    if (!editor) {
      return;
    }
    const verseSuggestModal = new VerseSuggestModal(this.plugin.app);
    const formattedSuggestion = verseSuggestModal.formatVersesForCallout(suggestion, this.selectedVerses);
    const { start, end } = this.context;
    editor.replaceRange(formattedSuggestion, start, end);
    const newCursorPosition = {
      line: start.line + formattedSuggestion.split("\n").length - 1,
      ch: ((_b = formattedSuggestion.split("\n").pop()) == null ? void 0 : _b.length) || 0
    };
    editor.setCursor(newCursorPosition);
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Setting #1").setDesc("It's a secret").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
      this.plugin.settings.mySetting = value;
      await this.plugin.saveSettings();
    }));
  }
};
